// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract HealthcareRecords {
    
    struct Record {
        uint256 id;
        string data;       
        address addedBy;  
        uint256 timestamp; 
    }

    
    mapping(address => Record[]) private patientRecords;

    
    mapping(address => mapping(address => bool)) private access;

    
    event RecordAdded(address indexed patient, address indexed addedBy, uint256 recordId, uint256 timestamp);
    event AccessGranted(address indexed patient, address indexed doctor);
    event AccessRevoked(address indexed patient, address indexed doctor);

    
    modifier onlyPatientOrAuthorized(address patient) {
        require(msg.sender == patient || access[patient][msg.sender], "Not authorized");
        _;
    }

    
    function grantAccess(address doctor) public {
        access[msg.sender][doctor] = true;
        emit AccessGranted(msg.sender, doctor);
    }

    
    function revokeAccess(address doctor) public {
        access[msg.sender][doctor] = false;
        emit AccessRevoked(msg.sender, doctor);
    }

    
    function addRecord(address patient, string memory data) public {
        
        require(msg.sender == patient || access[patient][msg.sender], "Not authorized to add record");

        Record memory newRecord = Record({
            id: patientRecords[patient].length,
            data: data,
            addedBy: msg.sender,
            timestamp: block.timestamp
        });

        patientRecords[patient].push(newRecord);
        emit RecordAdded(patient, msg.sender, newRecord.id, block.timestamp);
    }

    
    function getRecords(address patient) public view onlyPatientOrAuthorized(patient) returns (Record[] memory) {
        return patientRecords[patient];
    }
}
